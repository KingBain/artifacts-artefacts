name: Simple Java Build and Security Scan

on:
  push:
    branches: [ main, artifacts-artefacts/jfrog-cgd-demo ]
  pull_request:
    branches: [ main, artifacts-artefacts/jfrog-cgd-demo ]

env:
  REGISTRY: artifacts-artefacts.devops.cloud-nuage.canada.ca
  IMAGE_NAME: ssc-aurora-docker-local/chainguard-demo/java-app

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    strategy:
      matrix:
        dockerfile: [standard, chainguard]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://${{ env.REGISTRY }}
        JF_USER: ${{ secrets.JFROG_USERNAME }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_JWT_TOKEN }}

    - name: Docker login
      run: |
        echo "${{ secrets.JFROG_JWT_TOKEN }}" | docker login ${{ env.REGISTRY }} \
          --username "${{ secrets.JFROG_USERNAME }}" --password-stdin

    - name: Build image
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        docker build -f java-app/Dockerfile.${{ matrix.dockerfile }} -t $IMAGE_TAG java-app

    - name: Push image
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        docker push $IMAGE_TAG

    - name: Scan with JFrog Xray
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        jf docker scan $IMAGE_TAG

  frogbot:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Frogbot
      uses: jfrog/frogbot@v2
      env:
        JF_URL: https://${{ env.REGISTRY }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_JWT_TOKEN }}
        JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    needs: [build-and-scan]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'push'
    
    steps:
    - name: Build Summary
      run: |
        echo "Build ${{ github.run_number }} completed" >> $GITHUB_STEP_SUMMARY
        echo "Standard image: Built and scanned" >> $GITHUB_STEP_SUMMARY
        echo "Chainguard image: Built and scanned" >> $GITHUB_STEP_SUMMARY