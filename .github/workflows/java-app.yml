name: Java App - Security and Performance Pipeline

on:
  push:
    branches: [ main, artifacts-artefacts/jfrog-cgd-demo ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: artifacts-artefacts.devops.cloud-nuage.canada.ca
  IMAGE_NAME: ssc-aurora-docker-local/chainguard-demo/java-app

jobs:
  build-sign-and-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    strategy:
      matrix:
        dockerfile: [standard, chainguard]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.2'

    - name: Set up JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://${{ env.REGISTRY }}
        JF_USER: ${{ secrets.JFROG_USERNAME }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_JWT_TOKEN }}

    - name: Configure JFrog and Docker authentication
      run: |
        jf --version
        jf rt ping
        echo "${{ secrets.JFROG_JWT_TOKEN }}" | docker login ${{ env.REGISTRY }} \
          --username "${{ secrets.JFROG_USERNAME }}" --password-stdin

    - name: Pre-pull Chainguard base images (Workaround for BuildKit)
      if: ${{ matrix.dockerfile == 'chainguard' }}
      run: |
        docker pull ${{ env.REGISTRY }}/docker/ssc-spc.gc.ca/jdk:openjdk-24.0.1
        docker pull ${{ env.REGISTRY }}/docker/ssc-spc.gc.ca/jre:openjdk-24.0.1

    - name: Set up Docker Buildx (Standard only)
      if: ${{ matrix.dockerfile == 'standard' }}
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:master
          network=host

    - name: Build Docker image
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}

        if [ "${{ matrix.dockerfile }}" = "chainguard" ]; then
          export DOCKER_BUILDKIT=0
          docker build \
            -f java-app/Dockerfile.chainguard \
            -t $IMAGE_TAG \
            java-app
        else
          docker buildx build \
            --file java-app/Dockerfile.standard \
            --tag $IMAGE_TAG \
            --cache-from=type=gha,scope=standard \
            --cache-to=type=gha,mode=max,scope=standard \
            --metadata-file=image-metadata-standard.json \
            --load \
            java-app
        fi

    - name: Push image to JFrog Artifactory
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        jf docker push $IMAGE_TAG \
          --build-name=java-${{ matrix.dockerfile }} \
          --build-number=${{ github.run_number }}

    - name: Sign container image with Cosign
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        cosign sign --yes $IMAGE_TAG
        cosign verify $IMAGE_TAG \
          --certificate-identity-regexp="https://github.com/${{ github.repository }}" \
          --certificate-oidc-issuer="https://token.actions.githubusercontent.com" \
          || echo "Signature verification skipped"

    - name: Publish build metadata
      run: |
        jf rt build-add-git java-${{ matrix.dockerfile }} ${{ github.run_number }}
        jf rt build-add-env java-${{ matrix.dockerfile }} ${{ github.run_number }}
        jf rt build-publish java-${{ matrix.dockerfile }} ${{ github.run_number }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.dockerfile }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'

    - name: Run detailed Trivy analysis
      run: |
        IMAGE_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/workspace aquasec/trivy:latest image \
          --format json \
          --output /workspace/trivy-detailed-${{ matrix.dockerfile }}.json \
          $IMAGE_TAG
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/workspace aquasec/trivy:latest image \
          --format table \
          --output /workspace/trivy-summary-${{ matrix.dockerfile }}.txt \
          $IMAGE_TAG

    - name: Upload SARIF to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results-${{ matrix.dockerfile }}.sarif
        category: trivy-${{ matrix.dockerfile }}
      continue-on-error: true

    - name: Archive scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-analysis-${{ matrix.dockerfile }}-${{ github.run_number }}
        path: |
          trivy-results-${{ matrix.dockerfile }}.sarif
          trivy-detailed-${{ matrix.dockerfile }}.json
          trivy-summary-${{ matrix.dockerfile }}.txt
          image-metadata-${{ matrix.dockerfile }}.json
        retention-days: 30

  security-report:
    needs: build-sign-and-scan
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Download scan results
      uses: actions/download-artifact@v4
      with:
        path: scan-results

    - name: Generate GitHub summary report
      run: |
        echo "# Java App Security Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Build \`${{ github.sha }}\` #${{ github.run_number }} triggered by \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "| Type | Base | Signed | Scanned |" >> $GITHUB_STEP_SUMMARY
        echo "|------|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Standard | openjdk | Yes | Yes |" >> $GITHUB_STEP_SUMMARY
        echo "| Chainguard | jdk | Yes | Yes |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Review" >> $GITHUB_STEP_SUMMARY
        echo "- Check 'Security' tab for vulnerability breakdown" >> $GITHUB_STEP_SUMMARY
        echo "- Compare Chainguard vs Standard image posture" >> $GITHUB_STEP_SUMMARY
        echo "- Download artifacts for full details" >> $GITHUB_STEP_SUMMARY
