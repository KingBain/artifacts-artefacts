name: Frogbot Security Analysis

on:
  pull_request_target: 
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - artifacts-artefacts/jfrog-cgd-demo
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to perform'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - dependencies-only
        - containers-only

permissions:
  pull-requests: write
  contents: write
  security-events: write
  actions: read

jobs:
  frogbot-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        branch: ["main"]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Frogbot security scan
        uses: jfrog/frogbot@v2
        env:
          JF_URL: https://artifacts-artefacts.devops.cloud-nuage.canada.ca
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_JWT_TOKEN }}
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JF_GIT_BASE_BRANCH: ${{ matrix.branch }}
          JF_FAIL_ON_SECURITY_ISSUES: "false"
          JF_MIN_SEVERITY: "medium"
          JF_FIXABLE_ONLY: "false"
          JF_DOCKER_SCAN_ADD_POLICY: "true"
          JF_INCLUDE_ALL_VULNERABILITIES: "true"
          JF_OUTPUT_DIR: "frogbot-output"

      - name: Upload Frogbot results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('frogbot-output/**/*') != ''
        with:
          name: frogbot-security-results-${{ github.run_id }}
          path: |
            frogbot-output/
            .jfrog/
          retention-days: 30

  container-integration:
    needs: frogbot-scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write
    strategy:
      matrix:
        dockerfile: [standard, chainguard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3
      with:
        cosign-release: 'v2.2.2'

    - name: Set up JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://artifacts-artefacts.devops.cloud-nuage.canada.ca
        JF_USER: ${{ secrets.JFROG_USERNAME }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_JWT_TOKEN }}

    - name: Configure authentication
      run: |
        echo "${{ secrets.JFROG_JWT_TOKEN }}" | docker login artifacts-artefacts.devops.cloud-nuage.canada.ca \
          --username "${{ secrets.JFROG_USERNAME }}" --password-stdin

    - name: Build and push container
      run: |
        docker buildx build \
          --file ./java-app/Dockerfile.${{ matrix.dockerfile }} \
          --tag artifacts-artefacts.devops.cloud-nuage.canada.ca/ssc-aurora-docker-local/chainguard-demo/java-app:${{ github.sha }}-${{ matrix.dockerfile }} \
          --cache-from=type=gha \
          --cache-to=type=gha,mode=max \
          --load \
          ./java-app
        
        jf docker push artifacts-artefacts.devops.cloud-nuage.canada.ca/ssc-aurora-docker-local/chainguard-demo/java-app:${{ github.sha }}-${{ matrix.dockerfile }} \
          --build-name=java-${{ matrix.dockerfile }} \
          --build-number=${{ github.run_number }}

    - name: Sign container
      run: |
        cosign sign --yes artifacts-artefacts.devops.cloud-nuage.canada.ca/ssc-aurora-docker-local/chainguard-demo/java-app:${{ github.sha }}-${{ matrix.dockerfile }}

    - name: Publish build info
      run: |
        jf rt build-add-git java-${{ matrix.dockerfile }} ${{ github.run_number }}
        jf rt build-publish java-${{ matrix.dockerfile }} ${{ github.run_number }}

  security-summary:
    needs: [frogbot-scan, container-integration]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download Frogbot results
      uses: actions/download-artifact@v4
      with:
        name: frogbot-security-results-${{ github.run_id }}
        path: frogbot-results
      continue-on-error: true
      id: download_results

    - name: Generate security report
      run: |
        echo "# Security Analysis Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- Repository: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit SHA: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Build Number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Security Scans Completed" >> $GITHUB_STEP_SUMMARY
        echo "| Scan Type | Status | Tool | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Scan | Complete | Frogbot + Xray | All dependencies |" >> $GITHUB_STEP_SUMMARY
        echo "| Container Scan | Complete | Frogbot + Xray | Base images and layers |" >> $GITHUB_STEP_SUMMARY
        echo "| License Compliance | Complete | Frogbot + Xray | All components |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Secrets | Complete | Frogbot | Source code |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "## Container Images" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Registry | Signed | Scanned |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|----------|---------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Standard (OpenJDK) | artifacts-artefacts.devops.cloud-nuage.canada.ca | Yes | Yes |" >> $GITHUB_STEP_SUMMARY
          echo "| Chainguard (Distroless) | artifacts-artefacts.devops.cloud-nuage.canada.ca | Yes | Yes |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "## Frogbot Analysis" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.download_results.outcome }}" == "success" ] && [ -d "frogbot-results" ]; then
          echo "- Scan results: Detailed reports available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Pull request integration: Automated comments and fixes enabled" >> $GITHUB_STEP_SUMMARY
          echo "- JFrog platform integration: Active with detailed findings" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Status: Scan completed successfully with no significant security issues found" >> $GITHUB_STEP_SUMMARY
          echo "- Pull request integration: Active and monitoring for future changes" >> $GITHUB_STEP_SUMMARY
          echo "- JFrog platform integration: Active and healthy" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review pull request comments for vulnerability details" >> $GITHUB_STEP_SUMMARY
        echo "2. Apply any automated fix suggestions from Frogbot" >> $GITHUB_STEP_SUMMARY
        echo "3. Monitor daily scans for new vulnerabilities" >> $GITHUB_STEP_SUMMARY
        echo "4. Verify container signatures as needed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Verification Commands" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "# Verify container signatures" >> $GITHUB_STEP_SUMMARY
        echo "cosign verify artifacts-artefacts.devops.cloud-nuage.canada.ca/ssc-aurora-docker-local/chainguard-demo/java-app:${{ github.sha }}-standard \\" >> $GITHUB_STEP_SUMMARY
        echo "  --certificate-identity-regexp=\"https://github.com/${{ github.repository }}\" \\" >> $GITHUB_STEP_SUMMARY
        echo "  --certificate-oidc-issuer=\"https://token.actions.githubusercontent.com\"" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Check JFrog build info" >> $GITHUB_STEP_SUMMARY
        echo "jf rt build-info java-standard ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY