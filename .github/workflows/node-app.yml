name: Node.js App - Security Comparison

on:
  push:
    branches: [ main, artifacts-artefacts/jfrog-cgd-demo ]
    paths: [ 'node-app/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'node-app/**' ]

env:
  REGISTRY: artifacts-artefacts.devops.cloud-nuage.canada.ca
  IMAGE_NAME: ssc-aurora-docker-local/chainguard-demo/node-app

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [standard, chainguard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to JFrog Artifactory
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ARTIFACTORY_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-${{ matrix.dockerfile }}
          type=ref,event=pr,suffix=-${{ matrix.dockerfile }}
          type=sha,suffix=-${{ matrix.dockerfile }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./node-app
        file: ./node-app/Dockerfile.${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.dockerfile }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.dockerfile }}.sarif'
        category: 'trivy-${{ matrix.dockerfile }}'

  security-comparison:
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Security Analysis Summary
      run: |
        echo "## Security Comparison Report" >> $GITHUB_STEP_SUMMARY
        echo "This workflow builds the same Node.js application with both standard and Chainguard base images." >> $GITHUB_STEP_SUMMARY
        echo "Check the Security tab for detailed vulnerability comparison between:" >> $GITHUB_STEP_SUMMARY
        echo "- Standard Image: node:20-slim" >> $GITHUB_STEP_SUMMARY
        echo "- Chainguard Image: cgr.dev/ssc-spc.gc.ca/node:24.1.0" >> $GITHUB_STEP_SUMMARY
        echo "Expected result: Chainguard image should show significantly fewer vulnerabilities." >> $GITHUB_STEP_SUMMARY