name: Node.js App - Security Comparison

on:
  push:
    branches: [ main, artifacts-artefacts/jfrog-cgd-demo ]
    # paths: [ 'node-app/**' ]
  pull_request:
    branches: [ main ]
    # paths: [ 'node-app/**' ]

env:
  REGISTRY: artifacts-artefacts.devops.cloud-nuage.canada.ca
  IMAGE_NAME: ssc-aurora-docker-local/chainguard-demo/node-app

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile: [standard, chainguard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set up JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://${{ env.REGISTRY }}
        JF_USER: ${{ secrets.JFROG_USERNAME }}
        JF_ACCESS_TOKEN: ${{ secrets.JFROG_IDENTITY_TOKEN }}

    - name: Test JFrog connection
      run: |
        jf --version
        jf rt ping

    - name: Configure Docker to use JFrog CLI credentials
      run: |
        echo ${{ secrets.JFROG_IDENTITY_TOKEN }} | docker login ${{ env.REGISTRY }} --username ${{ secrets.JFROG_USERNAME }} --password-stdin

    - name: Build Docker image
      run: |
        docker build -f ./node-app/Dockerfile.${{ matrix.dockerfile }} -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }} ./node-app

    - name: Push Docker image using JFrog CLI
      run: |
        jf docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }} --build-name=node-${{ matrix.dockerfile }} --build-number=${{ github.run_number }}

    - name: Publish build info to Artifactory
      run: |
        jf rt build-publish node-${{ matrix.dockerfile }} ${{ github.run_number }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.dockerfile }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.dockerfile }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results-${{ matrix.dockerfile }}.sarif'
        category: 'trivy-${{ matrix.dockerfile }}'

  security-comparison:
    needs: build-and-scan
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Security Analysis Summary
      run: |
        echo "## Security Comparison Report" >> $GITHUB_STEP_SUMMARY
        echo "This workflow builds the same Node.js application with both standard and Chainguard base images." >> $GITHUB_STEP_SUMMARY
        echo "Check the Security tab for detailed vulnerability comparison between:" >> $GITHUB_STEP_SUMMARY
        echo "- Standard Image: node:20-slim" >> $GITHUB_STEP_SUMMARY
        echo "- Chainguard Image: cgr.dev/ssc-spc.gc.ca/node:24.1.0" >> $GITHUB_STEP_SUMMARY